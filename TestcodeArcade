package org.usfirst.frc.team7029.robot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.Timer;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	final String defaultAuto = "Default";
	final String customAuto = "My Auto";
	String autoSelected;
	SendableChooser<String> chooser = new SendableChooser<>();
	
	@SuppressWarnings("deprecation")
	public class RobotTemplate extends SampleRobot {

		@SuppressWarnings("deprecation")
		RobotDrive myDrive;
		Joystick driveStick;
		
	    @SuppressWarnings("deprecation")
		public void robotInit1() {
	    	myDrive = new RobotDrive(1,2,3,4);
	    	driveStick = new Joystick(1);
	    }

	    public void autonomousPeriodic1() {

	    }

	    @SuppressWarnings("deprecation")
		public void operatorControl() {
	    	while (isOperatorControl() && isEnabled()) {
	    		myDrive.arcadeDrive(driveStick);
	    		Timer.delay(0.01);
	    	}
	    }
	
	
	Victor rightback = new Victor(0);
	
    Victor leftback = new Victor(1);
    
    
    
   
    
    
    
    Joystick rightstick = new Joystick(0);
   
    
	/**61`	
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		CameraServer.getInstance().startAutomaticCapture();
		chooser.addDefault("Default Auto", defaultAuto);
		chooser.addObject("My Auto", customAuto);
		SmartDashboard.putData("Auto choices", chooser);
		
	}
	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		autoSelected = chooser.getSelected();
		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		switch (autoSelected) {
		case customAuto:
			// Put custom auto code here
			break;
		case defaultAuto:
		default:
			// Put default auto code here
			break;
		}
	}

	/**
	 * This function is called periodically during operator control
	 */
	@SuppressWarnings("null")
	@Override
	public void teleopPeriodic() {
		
       
        rightback.set(rightstick.getY());
        leftback.set(rightstick.getY());
  
       
	}
	
	

		
	

		
	
	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}
	
}
